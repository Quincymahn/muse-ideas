/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from "react";
import * as THREE from "three";
import { AudioAnalyser } from "three";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useFrame } from "@react-three/fiber";
import { useLimiter } from "spacesvr";

type GLTFResult = GLTF & {
  nodes: {
    speaker: THREE.Mesh;
  };
  materials: {
    ["speaker.mat"]: THREE.MeshStandardMaterial;
  };
};

const FILEURL =
  "https://d27rt3a60hh1lx.cloudfront.net/models/Speaker-1643711842/speaker_02.glb.gz";

type ModelProps = JSX.IntrinsicElements["group"] & { analyser?: AudioAnalyser };

export default function Model(props: ModelProps) {
  const { analyser, ...restProps } = props;

  const group = useRef<THREE.Group>(null);
  const { nodes, materials } = useGLTF(FILEURL) as GLTFResult;

  const limiter = useLimiter(60);
  useFrame(({ clock }) => {
    if (!limiter.isReady(clock) || !group.current || !analyser) return;

    const data = analyser.getFrequencyData();
    const sxz = data[0] / 255;
    const sy = data[5] / 255;

    group.current.scale.set(1 + sxz * 0.13, 1 + sy * 0.2, 1 + sxz * 0.13);
  });

  return (
    <group {...restProps} dispose={null}>
      <group position-y={-0.4}>
        <group ref={group}>
          <mesh
            name="speaker"
            geometry={nodes.speaker.geometry}
            material={materials["speaker.mat"]}
            scale={0.2}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload(FILEURL);
